From 2b442e1f3c5c13871b30fd8d2269c957c013142f Mon Sep 17 00:00:00 2001
From: Dmitry Timoshkov <dmitry@baikal.ru>
Date: Wed, 17 May 2017 23:55:55 +0800
Subject: [PATCH] server: Add support for a layered window region. (v3)

---
 dlls/winex11.drv/bitblt.c | 45 +++++++++++++++++++++++++++++++++++++++
 server/protocol.def       |  7 ++++++
 server/window.c           | 32 ++++++++++++++++++++++++++++
 3 files changed, 84 insertions(+)

diff --git a/dlls/winex11.drv/bitblt.c b/dlls/winex11.drv/bitblt.c
index 94aa06773a7..feb1a0a46c2 100644
--- a/dlls/winex11.drv/bitblt.c
+++ b/dlls/winex11.drv/bitblt.c
@@ -48,6 +48,7 @@
 
 #include "x11drv.h"
 #include "winternl.h"
+#include "wine/server.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(bitblt);
@@ -1627,6 +1628,48 @@ static inline void add_row( HRGN rgn, RGNDATA *data, int x, int y, int len )
 }
 #endif
 
+static void set_layer_region( struct x11drv_window_surface *surface, HRGN hrgn )
+{
+    static const RECT empty_rect;
+    RGNDATA *data;
+    DWORD size;
+    HWND hwnd;
+
+    if (XFindContext( thread_init_display(), surface->window, winContext, (char **)&hwnd ))
+        return;
+
+    if (hrgn)
+    {
+        if (!(size = NtGdiGetRegionData( hrgn, 0, NULL ))) return;
+        if (!(data = malloc( size ))) return;
+        if (!NtGdiGetRegionData( hrgn, size, data ))
+        {
+            free( data );
+            return;
+        }
+        SERVER_START_REQ( set_layer_region )
+        {
+            req->window = wine_server_user_handle( hwnd );
+            if (data->rdh.nCount)
+                wine_server_add_data( req, data->Buffer, data->rdh.nCount * sizeof(RECT) );
+            else
+                wine_server_add_data( req, &empty_rect, sizeof(empty_rect) );
+            wine_server_call( req );
+        }
+        SERVER_END_REQ;
+        free( data );
+    }
+    else  /* clear existing region */
+    {
+        SERVER_START_REQ( set_layer_region )
+        {
+            req->window = wine_server_user_handle( hwnd );
+            wine_server_call( req );
+        }
+        SERVER_END_REQ;
+    }
+}
+
 /***********************************************************************
  *           update_surface_region
  */
@@ -1645,6 +1688,7 @@ static void update_surface_region( struct x11drv_window_surface *surface )
     if (!surface->is_argb && surface->color_key == CLR_INVALID)
     {
         XShapeCombineMask( gdi_display, surface->window, ShapeBounding, 0, 0, None, ShapeSet );
+        set_layer_region( surface, NULL );
         return;
     }
 
@@ -1755,6 +1799,7 @@ static void update_surface_region( struct x11drv_window_surface *surface )
         free( data );
     }
 
+    set_layer_region( surface, rgn );
     NtGdiDeleteObjectApp( rgn );
 #endif
 }
diff --git a/server/protocol.def b/server/protocol.def
index 5d60e7fcda3..bf3f8295c64 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -2625,6 +2625,13 @@ enum coords_relative
 @END
 
 
+/* Set the layer region */
+@REQ(set_layer_region)
+    user_handle_t  window;        /* handle to the window */
+    VARARG(region,rectangles);    /* list of rectangles for the region (in window coords) */
+@END
+
+
 /* Get the window update region */
 @REQ(get_update_region)
     user_handle_t  window;        /* handle to the window */
diff --git a/server/window.c b/server/window.c
index 242e93f303a..970cbab7b8a 100644
--- a/server/window.c
+++ b/server/window.c
@@ -71,6 +71,7 @@ struct window
     rectangle_t      surface_rect;    /* window surface rectangle (relative to parent client area) */
     rectangle_t      client_rect;     /* client rectangle (relative to parent client area) */
     struct region   *win_region;      /* region for shaped windows (relative to window rect) */
+    struct region   *layer_region;    /* region for layered windows (relative to window rect) */
     struct region   *update_region;   /* update region (relative to window rect) */
     unsigned int     style;           /* window style */
     unsigned int     ex_style;        /* window extended style */
@@ -564,6 +565,7 @@ static struct window *create_window( struct window *parent, struct window *owner
     win->atom           = atom;
     win->last_active    = win->handle;
     win->win_region     = NULL;
+    win->layer_region   = NULL;
     win->update_region  = NULL;
     win->style          = 0;
     win->ex_style       = 0;
@@ -822,6 +824,9 @@ static int is_point_in_window( struct window *win, int *x, int *y, unsigned int
     if (win->win_region &&
         !point_in_region( win->win_region, *x - win->window_rect.left, *y - win->window_rect.top ))
         return 0;  /* not in window region */
+    if (win->layer_region &&
+        !point_in_region( win->layer_region, *x - win->window_rect.left, *y - win->window_rect.top ))
+        return 0;  /* not in layer mask region */
     return 1;
 }
 
@@ -1979,6 +1984,14 @@ static void set_window_region( struct window *win, struct region *region, int re
 }
 
 
+/* set the layer region */
+static void set_layer_region( struct window *win, struct region *region )
+{
+    if (win->layer_region) free_region( win->layer_region );
+    win->layer_region = region;
+}
+
+
 /* destroy a window */
 void free_window_handle( struct window *win )
 {
@@ -2042,6 +2055,7 @@ void free_window_handle( struct window *win )
     detach_window_thread( win );
 
     if (win->parent) set_parent_window( win, NULL );
+    if (win->layer_region) free_region( win->layer_region );
     free_user_handle( win->handle );
     win->handle = 0;
     release_object( win );
@@ -2699,6 +2713,24 @@ DECL_HANDLER(set_window_region)
 }
 
 
+/* set the layer region */
+DECL_HANDLER(set_layer_region)
+{
+    struct region *region = NULL;
+    struct window *win = get_window( req->window );
+
+    if (!win) return;
+
+    if (get_req_data_size())  /* no data means remove the region completely */
+    {
+        if (!(region = create_region_from_req_data( get_req_data(), get_req_data_size() )))
+            return;
+        if (win->ex_style & WS_EX_LAYOUTRTL) mirror_region( &win->window_rect, region );
+    }
+    set_layer_region( win, region );
+}
+
+
 /* get a window update region */
 DECL_HANDLER(get_update_region)
 {
-- 
2.43.0

